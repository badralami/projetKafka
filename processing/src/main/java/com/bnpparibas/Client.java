/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.bnpparibas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Client extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2118514218737219445L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Client\",\"namespace\":\"com.bnpparibas\",\"fields\":[{\"name\":\"nom\",\"type\":\"string\",\"doc\":\"nom du client\"},{\"name\":\"prenom\",\"type\":\"string\",\"doc\":\"prenom du client\"},{\"name\":\"age\",\"type\":\"int\",\"doc\":\"age du client\"},{\"name\":\"adresse\",\"type\":\"string\",\"doc\":\"adresse du client\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Client> ENCODER =
      new BinaryMessageEncoder<Client>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Client> DECODER =
      new BinaryMessageDecoder<Client>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Client> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Client> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Client>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Client to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Client from a ByteBuffer. */
  public static Client fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** nom du client */
  @Deprecated public java.lang.CharSequence nom;
  /** prenom du client */
  @Deprecated public java.lang.CharSequence prenom;
  /** age du client */
  @Deprecated public int age;
  /** adresse du client */
  @Deprecated public java.lang.CharSequence adresse;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Client() {}

  /**
   * All-args constructor.
   * @param nom nom du client
   * @param prenom prenom du client
   * @param age age du client
   * @param adresse adresse du client
   */
  public Client(java.lang.CharSequence nom, java.lang.CharSequence prenom, java.lang.Integer age, java.lang.CharSequence adresse) {
    this.nom = nom;
    this.prenom = prenom;
    this.age = age;
    this.adresse = adresse;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return nom;
    case 1: return prenom;
    case 2: return age;
    case 3: return adresse;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: nom = (java.lang.CharSequence)value$; break;
    case 1: prenom = (java.lang.CharSequence)value$; break;
    case 2: age = (java.lang.Integer)value$; break;
    case 3: adresse = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'nom' field.
   * @return nom du client
   */
  public java.lang.CharSequence getNom() {
    return nom;
  }

  /**
   * Sets the value of the 'nom' field.
   * nom du client
   * @param value the value to set.
   */
  public void setNom(java.lang.CharSequence value) {
    this.nom = value;
  }

  /**
   * Gets the value of the 'prenom' field.
   * @return prenom du client
   */
  public java.lang.CharSequence getPrenom() {
    return prenom;
  }

  /**
   * Sets the value of the 'prenom' field.
   * prenom du client
   * @param value the value to set.
   */
  public void setPrenom(java.lang.CharSequence value) {
    this.prenom = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return age du client
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * age du client
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'adresse' field.
   * @return adresse du client
   */
  public java.lang.CharSequence getAdresse() {
    return adresse;
  }

  /**
   * Sets the value of the 'adresse' field.
   * adresse du client
   * @param value the value to set.
   */
  public void setAdresse(java.lang.CharSequence value) {
    this.adresse = value;
  }

  /**
   * Creates a new Client RecordBuilder.
   * @return A new Client RecordBuilder
   */
  public static com.bnpparibas.Client.Builder newBuilder() {
    return new com.bnpparibas.Client.Builder();
  }

  /**
   * Creates a new Client RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Client RecordBuilder
   */
  public static com.bnpparibas.Client.Builder newBuilder(com.bnpparibas.Client.Builder other) {
    return new com.bnpparibas.Client.Builder(other);
  }

  /**
   * Creates a new Client RecordBuilder by copying an existing Client instance.
   * @param other The existing instance to copy.
   * @return A new Client RecordBuilder
   */
  public static com.bnpparibas.Client.Builder newBuilder(com.bnpparibas.Client other) {
    return new com.bnpparibas.Client.Builder(other);
  }

  /**
   * RecordBuilder for Client instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Client>
    implements org.apache.avro.data.RecordBuilder<Client> {

    /** nom du client */
    private java.lang.CharSequence nom;
    /** prenom du client */
    private java.lang.CharSequence prenom;
    /** age du client */
    private int age;
    /** adresse du client */
    private java.lang.CharSequence adresse;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.bnpparibas.Client.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.nom)) {
        this.nom = data().deepCopy(fields()[0].schema(), other.nom);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.prenom)) {
        this.prenom = data().deepCopy(fields()[1].schema(), other.prenom);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.adresse)) {
        this.adresse = data().deepCopy(fields()[3].schema(), other.adresse);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Client instance
     * @param other The existing instance to copy.
     */
    private Builder(com.bnpparibas.Client other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.nom)) {
        this.nom = data().deepCopy(fields()[0].schema(), other.nom);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.prenom)) {
        this.prenom = data().deepCopy(fields()[1].schema(), other.prenom);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.age)) {
        this.age = data().deepCopy(fields()[2].schema(), other.age);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.adresse)) {
        this.adresse = data().deepCopy(fields()[3].schema(), other.adresse);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'nom' field.
      * nom du client
      * @return The value.
      */
    public java.lang.CharSequence getNom() {
      return nom;
    }

    /**
      * Sets the value of the 'nom' field.
      * nom du client
      * @param value The value of 'nom'.
      * @return This builder.
      */
    public com.bnpparibas.Client.Builder setNom(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.nom = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'nom' field has been set.
      * nom du client
      * @return True if the 'nom' field has been set, false otherwise.
      */
    public boolean hasNom() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'nom' field.
      * nom du client
      * @return This builder.
      */
    public com.bnpparibas.Client.Builder clearNom() {
      nom = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'prenom' field.
      * prenom du client
      * @return The value.
      */
    public java.lang.CharSequence getPrenom() {
      return prenom;
    }

    /**
      * Sets the value of the 'prenom' field.
      * prenom du client
      * @param value The value of 'prenom'.
      * @return This builder.
      */
    public com.bnpparibas.Client.Builder setPrenom(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.prenom = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'prenom' field has been set.
      * prenom du client
      * @return True if the 'prenom' field has been set, false otherwise.
      */
    public boolean hasPrenom() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'prenom' field.
      * prenom du client
      * @return This builder.
      */
    public com.bnpparibas.Client.Builder clearPrenom() {
      prenom = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * age du client
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }

    /**
      * Sets the value of the 'age' field.
      * age du client
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.bnpparibas.Client.Builder setAge(int value) {
      validate(fields()[2], value);
      this.age = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * age du client
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'age' field.
      * age du client
      * @return This builder.
      */
    public com.bnpparibas.Client.Builder clearAge() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'adresse' field.
      * adresse du client
      * @return The value.
      */
    public java.lang.CharSequence getAdresse() {
      return adresse;
    }

    /**
      * Sets the value of the 'adresse' field.
      * adresse du client
      * @param value The value of 'adresse'.
      * @return This builder.
      */
    public com.bnpparibas.Client.Builder setAdresse(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.adresse = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'adresse' field has been set.
      * adresse du client
      * @return True if the 'adresse' field has been set, false otherwise.
      */
    public boolean hasAdresse() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'adresse' field.
      * adresse du client
      * @return This builder.
      */
    public com.bnpparibas.Client.Builder clearAdresse() {
      adresse = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Client build() {
      try {
        Client record = new Client();
        record.nom = fieldSetFlags()[0] ? this.nom : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.prenom = fieldSetFlags()[1] ? this.prenom : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.age = fieldSetFlags()[2] ? this.age : (java.lang.Integer) defaultValue(fields()[2]);
        record.adresse = fieldSetFlags()[3] ? this.adresse : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Client>
    WRITER$ = (org.apache.avro.io.DatumWriter<Client>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Client>
    READER$ = (org.apache.avro.io.DatumReader<Client>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
